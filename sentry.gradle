import org.apache.tools.ant.taskdefs.condition.Os

gradle.projectsEvaluated {
    def releases = [];
    android.applicationVariants.each { variant ->
        def releaseName = "${variant.getApplicationId()}-${variant.getVersionName()}";
        variant.outputs.each { output ->
            def processTask = output.getProcessResources();
            def versionCode = output.getVersionCode();
            releases.add([output.getName(), releaseName, versionCode]);
        }
    }

    // separately we then hook into the bundle task of react native to inject
    // sourcemap generation parameters.  In case for whatever reason no release
    // was found for the asset folder we just bail.
    def bundleTasks = tasks.findAll { task ->
        task.name.startsWith("bundle") && task.name.endsWith("JsAndAssets")
    }
    bundleTasks.each { bundleTask ->
        def props = bundleTask.getProperties();
        def cmd = props.get("commandLine") as List<String>;
        def cmdArgs = props.get("args") as List<String>;
        def bundleOutput = null;
        def sourcemapOutput = null;
        def reactRoot = props.get("workingDir");
        def propertiesFile = "$reactRoot/android/sentry.properties";
        Properties sentryProps = new Properties();
        try {
            sentryProps.load(new FileInputStream(propertiesFile));
        } catch (FileNotFoundException e) {}
        def cliExecutable = sentryProps.get("cli.executable", "$reactRoot/node_modules/sentry-cli-binary/bin/sentry-cli");

        cmdArgs.eachWithIndex{ String arg, int i ->
            if (arg == "--bundle-output") {
                bundleOutput = cmdArgs[i + 1];
            } else if (arg == "--sourcemap-output") {
                sourcemapOutput = cmdArgs[i + 1];
            }
        }

        if (sourcemapOutput == null) {
            sourcemapOutput = bundleOutput + ".map";
            cmd.push("--sourcemap-output");
            cmd.push(sourcemapOutput);
            cmdArgs.push("--sourcemap-output");
            cmdArgs.push(sourcemapOutput);
        }

        bundleTask.setProperty("commandLine", cmd);
        bundleTask.setProperty("args", cmdArgs);

        releases.each { variant, releaseName, versionCodes ->
            def cliTask = tasks.create(
                name: bundleTask.getName() + variant + "SentryUpload",
                type: Exec) {
                description = "upload debug symbols to sentry"

                workingDir reactRoot
                environment("SENTRY_PROPERTIES", propertiesFile)

                def args = [
                    cliExecutable
                ];
                if (project.hasProperty("sentryloglevel") ) {
                    args.push("--log-level");
                    args.push(sentryloglevel);
                }
                args.push("react-native");
                args.push("gradle");
                args.push("--bundle");
                args.push(bundleOutput);
                args.push("--sourcemap");
                args.push(sourcemapOutput);
                args.push("--release");
                args.push(releaseName);

                versionCodes.each { versionCode ->
                    args.add("--dist");
                    args.add(versionCode);
                }

                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine("cmd", "/c", *args)
                } else {
                    commandLine(*args)
                }
                enabled true
            }

            bundleTask.doLast {
                cliTask.execute();
            }

            cliTask.dependsOn(bundleTask)
        }
    }
}
