import org.apache.tools.ant.taskdefs.condition.Os

gradle.projectsEvaluated {
    def bundleTasks = tasks.findAll { task ->
        task.name.startsWith("bundle") && task.name.endsWith("JsAndAssets")
    }

    bundleTasks.each { bundleTask ->
        def props = bundleTask.getProperties();
        def cmd = props.get("commandLine") as List<String>;
        def bundleOutput = null;
        def sourcemapOutput = null;
        def reactRoot = props.get("workingDir");

        cmd.eachWithIndex{ String arg, int i ->
            if (arg == "--bundle-output") {
                bundleOutput = cmd[i + 1];
            } else if (arg == "--sourcemap-output") {
                sourcemapOutput = cmd[i + 1];
            }
        }

        if (sourcemapOutput == null) {
            sourcemapOutput = bundleOutput + ".map";
            cmd.push("--sourcemap-output");
            cmd.push(sourcemapOutput);
        }

        def cliTask = tasks.create(
            name: bundleTask.getName() + "SentryUpload",
            type: Exec) {
            description = "upload debug symbols to sentry"

            workingDir reactRoot
            environment("SENTRY_PROPERTIES", "$reactRoot/android/sentry.properties")
            def args = [
                "/Users/mitsuhiko/Development/sentry-cli/target/debug/sentry-cli",
                "react-native-gradle",
                "--bundle", bundleOutput,
                "--sourcemap", sourcemapOutput,
                "--release", "XXX"
            ];
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine("cmd", "/c", *args)
            } else {
                commandLine(*args)
            }
            enabled true
        }

        bundleTask.doLast {
            cliTask.execute();
        }

        cliTask.dependsOn(bundleTask)
    }
}
